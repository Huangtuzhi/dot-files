set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" " alternatively, pass a path where Vundle should install plugins
" "call vundle#begin('~/some/path/here')
"
" " let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'L9'
Plugin 'git://git.wincent.com/command-t.git'
""Plugin 'file:///home/gmarik/path/to/plugin'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'The-NERD-tree'                 "目录树显示插件
Plugin 'The-NERD-Commenter'         "快速注释插件
Plugin 'ctrlp.vim'                     "文件查找插件
Plugin 'AutoClose'                     "自动添加匹配的右括号
Plugin 'Valloric/YouCompleteMe'     "目前最好用的自动补全插件
""Plugin 'honza/vim-snippets'            "代码片段自动生成插件
""Plugin 'Lokaltog/vim-easymotion'    "快速跳转/查找字符插件`

nmap <F5> :NERDTreeToggle<cr>


"
" " All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"文件编码
set termencoding=utf-8
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
"use mouse everywhere
set mouse=a
"显示行号
set nu
"检测文件的类型
filetype on
"记录历史的行数
set history=1000
"背景使用黑色
set background=dark
"语法高亮度显示
syntax on
"下面两行在进行编写代码时，在格式对起上很有用；
"第一行，vim使用自动对起，也就是把当前行的对起格式应用到下一行；
"第二行，依据上面的对起格式，智能的选择对起方式，对于类似C语言编
"写上很有用
set autoindent
set smartindent
"支持C/C++的缩进
set cin
"空格代替缩进
set expandtab " 使用space代替tab.
set tabstop=4 " 四个空格。
set shiftwidth=4 "自动缩进的宽度。
"设置匹配模式，类似当输入一个左括号时会匹配相应的那个右括号
set showmatch
"寻找匹配是高亮度显示的
set hls
"<F2>关闭高亮
map <F2> :nohlsearch <CR>
imap <F2> <ESC><F2>
"禁止自动备份
set nobackup
"搜索时忽略大小写
set ignorecase
"如果搜索模式包含大写字符，不使用 'ignorecase'选项。只有在输入搜索模式并且打开 'ignorecase' 选项时才会使用。
set smartcase
"自动更改目录
set autochdir
"设置主题
colorscheme desert
"powerline
set nocompatible
set laststatus=2
set t_Co=256
"开启插件支持
filetype plugin on
"高亮当前行
"set cursorline
"保存文件快捷键
"map <F2> :w<CR>
"imap <F2> <ESC><F2>
"设置qt ctags
set tags+=/usr/include/qt4/tags
set tags+=/usr/include/c++/tags
"pathogen -->管理插件的插件
"call pathogen#infect()
"omnicppcomplete插件--> 完美的cpp补全
" 按下F3自动补全代码，注意该映射语句后不能有其他字符，包括tab；否则按下F3会自动补全一些乱码
"imap <F3> <C-X><C-O>
" 按下F2根据头文件内关键字补全
"imap <F2> <C-X><C-I>
set completeopt=menu,menuone " 关掉智能补全时的预览窗口
let OmniCpp_MayCompleteDot = 1 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype in popup window
let OmniCpp_GlobalScopeSearch=1 " enable the global scope search
let OmniCpp_DisplayMode=1 " Class scope completion mode: always show all members
"let OmniCpp_DefaultNamespaces=["std"]
let OmniCpp_ShowScopeInAbbr=1 " show scope in abbreviation and remove the last column
let OmniCpp_ShowAccess=1
"设置折叠方式
set foldmethod=manual
"跨行移动
set whichwrap=b,s,<,>,[,]
"pythoncomplete插件
autocmd FileType python set omnifunc=pythoncomplete#Complete
"minibuffer explore 插件
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
"gui下ctrl+s保存文件
if has("gui_running")
imap <C-S> <ESC>:w<CR>
map <C-S> :w<CR>
endif
